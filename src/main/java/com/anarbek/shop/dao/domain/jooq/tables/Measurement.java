/**
 * This class is generated by jOOQ
 */
package com.anarbek.shop.dao.domain.jooq.tables;


import com.anarbek.shop.dao.domain.jooq.Keys;
import com.anarbek.shop.dao.domain.jooq.Public;
import com.anarbek.shop.dao.domain.jooq.tables.records.MeasurementRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Measurement extends TableImpl<MeasurementRecord> {

	private static final long serialVersionUID = -1809958683;

	/**
	 * The reference instance of <code>public.measurement</code>
	 */
	public static final Measurement MEASUREMENT = new Measurement();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<MeasurementRecord> getRecordType() {
		return MeasurementRecord.class;
	}

	/**
	 * The column <code>public.measurement.id</code>.
	 */
	public final TableField<MeasurementRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>public.measurement.description</code>.
	 */
	public final TableField<MeasurementRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(4000), this, "");

	/**
	 * The column <code>public.measurement.measurement_position</code>.
	 */
	public final TableField<MeasurementRecord, String> MEASUREMENT_POSITION = createField("measurement_position", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>public.measurement.title</code>.
	 */
	public final TableField<MeasurementRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(512), this, "");

	/**
	 * The column <code>public.measurement.value</code>.
	 */
	public final TableField<MeasurementRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * Create a <code>public.measurement</code> table reference
	 */
	public Measurement() {
		this("measurement", null);
	}

	/**
	 * Create an aliased <code>public.measurement</code> table reference
	 */
	public Measurement(String alias) {
		this(alias, MEASUREMENT);
	}

	private Measurement(String alias, Table<MeasurementRecord> aliased) {
		this(alias, aliased, null);
	}

	private Measurement(String alias, Table<MeasurementRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<MeasurementRecord> getPrimaryKey() {
		return Keys.MEASUREMENT_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<MeasurementRecord>> getKeys() {
		return Arrays.<UniqueKey<MeasurementRecord>>asList(Keys.MEASUREMENT_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Measurement as(String alias) {
		return new Measurement(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Measurement rename(String name) {
		return new Measurement(name, null);
	}
}
